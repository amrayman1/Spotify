// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Profile_and_Singers.Data;

#nullable disable

namespace Profile_and_Singers.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MusicSingerMusic", b =>
                {
                    b.Property<int>("musicsId")
                        .HasColumnType("int");

                    b.Property<int>("singerMusicsId")
                        .HasColumnType("int");

                    b.HasKey("musicsId", "singerMusicsId");

                    b.HasIndex("singerMusicsId");

                    b.ToTable("MusicSingerMusic");
                });

            modelBuilder.Entity("Profile_and_Singers.Models.Music", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("musics");
                });

            modelBuilder.Entity("Profile_and_Singers.Models.Singer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("singers");
                });

            modelBuilder.Entity("Profile_and_Singers.Models.SingerMusic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MusicId")
                        .HasColumnType("int");

                    b.Property<int>("SingerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("singerMusics");
                });

            modelBuilder.Entity("SingerSingerMusic", b =>
                {
                    b.Property<int>("singerMusicsId")
                        .HasColumnType("int");

                    b.Property<int>("singersId")
                        .HasColumnType("int");

                    b.HasKey("singerMusicsId", "singersId");

                    b.HasIndex("singersId");

                    b.ToTable("SingerSingerMusic");
                });

            modelBuilder.Entity("MusicSingerMusic", b =>
                {
                    b.HasOne("Profile_and_Singers.Models.Music", null)
                        .WithMany()
                        .HasForeignKey("musicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Profile_and_Singers.Models.SingerMusic", null)
                        .WithMany()
                        .HasForeignKey("singerMusicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SingerSingerMusic", b =>
                {
                    b.HasOne("Profile_and_Singers.Models.SingerMusic", null)
                        .WithMany()
                        .HasForeignKey("singerMusicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Profile_and_Singers.Models.Singer", null)
                        .WithMany()
                        .HasForeignKey("singersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
